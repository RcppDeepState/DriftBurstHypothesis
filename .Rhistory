vSim[i] = dMu + dPhi * (vSim[(i-1)] - dMu) + vEps[i]
}
vY = exp(vSim/2) * vEpsy
return(vY)
}
#Set parameter values of the simulation
iT = 66500; dSigma = 0.3; dPhi = 0.98; dMu = -10;
#set seed for reproducibility
set.seed(123)
#Simulate the series
vY = 500+cumsum(StochasticVolatilitySim(iT, dSigma, dPhi, dMu))
#insert an outlier to illustrate robustness.
vY[50000] = 500
#Here, the observations are equidistant, but the code can handle unevenly spaced observations.
timestamps = seq(34200 , 57600 , length.out = iT)
testTimes = seq(34260, 57600, 60)
logprices = log(vY)
library("DriftBurstHypothesis")
#calculating drift burst hypothesis
DBH = driftBursts(timestamps,  logprices,
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = FALSE)
#plot test statistic
plot(DBH)
#plot both test statistic and price
plot(DBH, price = vY, timestamps = timestamps)
#Plot the mu series
plot(DBH, which = "Mu")
#plot the sigma series
plot(DBH, which = "Sigma")
#plot both
plot(DBH, which = c("Mu", "Sigma"))
#Means of the tstat, sigma, and mu series.
mean(getDB(DBH))
mean(getSigma(DBH))
mean(getMu(DBH))
################## same example with xts object:
library("xts")
#Set parameter values of the simulation
iT = 66500; dSigma = 0.3; dPhi = 0.98; dMu = -10;
#set seed for reproducibility
set.seed(123)
#Simulate the series
vY = 500+cumsum(StochasticVolatilitySim(iT, dSigma, dPhi, dMu))
#insert an outlier to illustrate robustness.
vY[50000] = 500
#Here, the observations are equidistant, but the code can handle unevenly spaced observations.
timestamps = seq(34200 , 57600 , length.out = iT)
StartTime = strptime("1970-01-01 00:00:00.0000", "%Y-%m-%d %H:%M:%OS", tz = "GMT")
Tradetime = StartTime + timestamps
testTimes = seq(34260, 57600, 60)
price = xts(vY, Tradetime)
DBHxts = driftBursts(timestamps = NULL,  log(price),
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = FALSE)
all.equal(as.numeric(getDB(DBH)), as.numeric(getDB(DBHxts)))
plot(DBHxts, price = price)
#check for equality
#}
library(xts)
library(DriftBurstHypothesis)
iT = 66500*1; dSigma = 0.3; dPhi = 0.98; dMu = -10;
#set seed for reproducibility
set.seed(123)
#Simulate the series
vY = 500+cumsum(StochasticVolatilitySim(iT, dSigma, dPhi, dMu))
timestamps = seq(34200 , 57600 , length.out = iT)
StartTime = strptime("1970-01-01 00:00:00.0000", "%Y-%m-%d %H:%M:%OS", tz = "GMT")
Tradetime = StartTime + timestamps
vY[50000] = 500
vYxts= xts(vY, Tradetime)
#insert an outlier to illustrate robustness.
#Here, the observations are equidistant, but the code can handle unevenly spaced observations.
timestamps = seq(34200 , 57600 , length.out = iT)
testTimes = seq(34260, 57600, 60)
logprices = log(vY)
system.time({DBHtStat = driftBursts(timestamps = timestamps,  log(vY),
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = TRUE, nCores = 8, warnings = TRUE)})
system.time({DBHtStatxts = driftBursts(timestamps = NULL,  log(vYxts),
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = TRUE, nCores = 8)})
all.equal(as.numeric(DBHtStat$DriftBursts), as.numeric(DBHtStatxts$DriftBursts))
library(xts)
library(DriftBurstHypothesis)
iT = 66500*1; dSigma = 0.3; dPhi = 0.98; dMu = -10;
#set seed for reproducibility
set.seed(123)
#Simulate the series
vY = 500+cumsum(StochasticVolatilitySim(iT, dSigma, dPhi, dMu))
timestamps = seq(34200 , 57600 , length.out = iT)
StartTime = strptime("1970-01-01 00:00:00.0000", "%Y-%m-%d %H:%M:%OS", tz = "GMT")
Tradetime = StartTime + timestamps
vYxts= xts(vY, Tradetime)
#insert an outlier to illustrate robustness.
#Here, the observations are equidistant, but the code can handle unevenly spaced observations.
timestamps = seq(34200 , 57600 , length.out = iT)
testTimes = seq(34260, 57600, 60)
logprices = log(vY)
plot.ts(vY)
system.time({DBHtStat = driftBursts(timestamps = timestamps,  log(vY),
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = TRUE, nCores = 8, warnings = TRUE)})
system.time({DBHtStat = driftBursts(timestamps = timestamps,  log(vY),
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = TRUE, nCores = 8, warnings = TRUE)})
system.time({DBHtStat = driftBursts(timestamps = timestamps,  log(vY),
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = TRUE, nCores = 8, warnings = TRUE)})
system.time({DBHtStat = driftBursts(timestamps = timestamps,  log(vY),
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = TRUE, nCores = 8, warnings = TRUE)})
system.time({DBHtStat = driftBursts(timestamps = timestamps,  log(vY),
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = TRUE, nCores = 8, warnings = TRUE)})
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
#Simulate from a stochastic volatility model.
#Both a flash crash and flash rally are coded into the function.
StochasticVolatilitySim = function(iT, dSigma, dPhi, dMu){
vSim = numeric(iT)
vEps = rnorm(iT , sd =dSigma)
vEpsy = rnorm(iT)
vEps[30001:32000] = rnorm(2000 ,sd =seq(from = dSigma ,
to = 2*dSigma , length.out = 2000))
vEps[32001:34000] = rnorm(2000 ,sd =seq(from = 2*dSigma ,
to = dSigma , length.out = 2000))
vEpsy[30001:32000] = -rnorm(2000 ,mean =seq(from = 0,
to = 0.3 , length.out = 2000))
vEpsy[32001:34000] = -rnorm(2000 ,mean =seq(from = 0.3,
to = 0 , length.out = 2000))
vEps[60001:63000] = rnorm(3000,sd = seq(from = dSigma ,
to = 2*dSigma , length.out = 3000))
vEps[63001:66000] = rnorm(3000,  sd = seq(from = 2*dSigma ,
to =  dSigma, length.out = 3000))
vEpsy[60001:63000] = rnorm(3000 ,mean =seq(from = 0,
to = 0.2 , length.out = 3000))
vEpsy[63001:66000] = rnorm(3000 ,mean =seq(from = 0.2,
to = 0 , length.out = 3000))
vSim[1] = dMu + dPhi *rnorm(1 , mean = dMu , sd = dSigma /sqrt(1-dPhi^2))
for (i in 2:iT) {
vSim[i] = dMu + dPhi * (vSim[(i-1)] - dMu) + vEps[i]
}
vY = exp(vSim/2) * vEpsy
return(vY)
}
#Set parameter values of the simulation
iT = 66500; dSigma = 0.3; dPhi = 0.98; dMu = -10;
#set seed for reproducibility
set.seed(123)
#Simulate the series
vY = 500+cumsum(StochasticVolatilitySim(iT, dSigma, dPhi, dMu))
#insert an outlier to illustrate robustness.
vY[50000] = 500
#Here, the observations are equidistant, but the code can handle unevenly spaced observations.
timestamps = seq(34200 , 57600 , length.out = iT)
testTimes = seq(34260, 57600, 60)
logprices = log(vY)
library("DriftBurstHypothesis")
#calculating drift burst hypothesis
DBH = driftBursts(timestamps,  logprices,
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = FALSE)
#plot test statistic
plot(DBH)
#plot both test statistic and price
plot(DBH, price = vY, timestamps = timestamps)
#Plot the mu series
plot(DBH, which = "Mu")
#plot the sigma series
plot(DBH, which = "Sigma")
#plot both
plot(DBH, which = c("Mu", "Sigma"))
#Means of the tstat, sigma, and mu series.
mean(getDB(DBH))
mean(getSigma(DBH))
mean(getMu(DBH))
################## same example with xts object:
library("xts")
#Set parameter values of the simulation
iT = 66500; dSigma = 0.3; dPhi = 0.98; dMu = -10;
#set seed for reproducibility
set.seed(123)
#Simulate the series
vY = 500+cumsum(StochasticVolatilitySim(iT, dSigma, dPhi, dMu))
#insert an outlier to illustrate robustness.
vY[50000] = 500
#Here, the observations are equidistant, but the code can handle unevenly spaced observations.
timestamps = seq(34200 , 57600 , length.out = iT)
StartTime = strptime("1970-01-01 00:00:00.0000", "%Y-%m-%d %H:%M:%OS", tz = "GMT")
Tradetime = StartTime + timestamps
testTimes = seq(34260, 57600, 60)
price = xts(vY, Tradetime)
DBHxts = driftBursts(timestamps = NULL,  log(price),
testTimes, preAverage = 5, ACLag = -1L,
meanBandwidth = 300L, varianceBandwidth = 900L,
parallelize = FALSE)
all.equal(as.numeric(getDB(DBH)), as.numeric(getDB(DBHxts)))
plot(DBHxts, price = price)
DBHxts
library(DriftBurstHypothesis)
DBHxts
class(DBHxts)
library(DriftBurstHypothesis)
DBHxts
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
getCriticalValues(DBH)
DBH
getCriticalValues(DBH)
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
getCriticalValues(DBH)
class(DBH)
getCriticalValues(DBH)
library(DriftBurstHypothesis)
getCriticalValuse(DBH)
getCriticalValues(DBH)
library(DriftBurstHypothesis)
getCriticalValues(DBH)
target_file <- "/tmp/Rprof.out"
library(jointprof)
library(jointprof)
library(DriftBurstHypothesis)
set.seed(1)
# Set mean and variance bandwidth parameters
meanBandwidth = 300L
varianceBandwidth = 900L
# Simulate noise-less price series with 23400 observations, denoting 1 trader per second
# and generate corresponding timestamps.
iT = 23399
r = rnorm(iT, mean = 0, sd = 1)/sqrt(iT)
p = c(0,cumsum(r))
timestamps = seq(34200, 57600, length.out = iT+1)
# Test every minute after the instability period is over.
testTimes  = seq(34260 + varianceBandwidth, 57600, 60L)
target_file <- "/tmp/Rprof.out"
# Collect profile data
start_profiler(target_file)
## code to be profiled
# Calculate drift burst test statistic
DBH = driftBursts(timestamps, p, testTimes, preAverage = 1, ACLag = -1,
meanBandwidth = meanBandwidth, varianceBandwidth = varianceBandwidth)
stop_profiler()
# Analyze profile data
summaryRprof(target_file)
options(error = recover)
stop_profiler()
library(jointprof)
library(DriftBurstHypothesis)
set.seed(1)
# Set mean and variance bandwidth parameters
meanBandwidth = 300L
varianceBandwidth = 900L
# Simulate noise-less price series with 23400 observations, denoting 1 trader per second
# and generate corresponding timestamps.
iT = 23399
r = rnorm(iT, mean = 0, sd = 1)/sqrt(iT)
p = c(0,cumsum(r))
timestamps = seq(34200, 57600, length.out = iT+1)
# Test every minute after the instability period is over.
testTimes  = seq(34260 + varianceBandwidth, 57600, 60L)
target_file <- "/tmp/Rprof.out"
# Collect profile data
start_profiler(target_file)
## code to be profiled
# Calculate drift burst test statistic
DBH = driftBursts(timestamps, p, testTimes, preAverage = 1, ACLag = -1,
meanBandwidth = meanBandwidth, varianceBandwidth = varianceBandwidth)
stop_profiler()
.my_env$pprof_path
.my_env$rprof_path
combine_profiles(.my_env$pprof_path, .my_env$rprof_path)
0
library(jointprof)
library(DriftBurstHypothesis)
set.seed(1)
# Set mean and variance bandwidth parameters
meanBandwidth = 300L
varianceBandwidth = 900L
# Simulate noise-less price series with 23400 observations, denoting 1 trader per second
# and generate corresponding timestamps.
iT = 23399
r = rnorm(iT, mean = 0, sd = 1)/sqrt(iT)
p = c(0,cumsum(r))
timestamps = seq(34200, 57600, length.out = iT+1)
# Test every minute after the instability period is over.
testTimes  = seq(34260 + varianceBandwidth, 57600, 60L)
target_file <- "/tmp/Rprof.out"
# Collect profile data
start_profiler(target_file)
library(jointprof)
library(DriftBurstHypothesis)
set.seed(1)
# Set mean and variance bandwidth parameters
meanBandwidth = 300L
varianceBandwidth = 900L
# Simulate noise-less price series with 23400 observations, denoting 1 trader per second
# and generate corresponding timestamps.
iT = 23399
r = rnorm(iT, mean = 0, sd = 1)/sqrt(iT)
p = c(0,cumsum(r))
timestamps = seq(34200, 57600, length.out = iT+1)
# Test every minute after the instability period is over.
testTimes  = seq(34260 + varianceBandwidth, 57600, 60L)
target_file <- "/tmp/Rprof.out"
# Collect profile data
start_profiler(target_file)
# Collect profile data
start_profiler(target_file)
# Collect profile data
start_profiler(target_file)
stop_profiler()
library(jointprof)
library(DriftBurstHypothesis)
set.seed(1)
# Set mean and variance bandwidth parameters
meanBandwidth = 300L
varianceBandwidth = 900L
# Simulate noise-less price series with 23400 observations, denoting 1 trader per second
# and generate corresponding timestamps.
iT = 23399
r = rnorm(iT, mean = 0, sd = 1)/sqrt(iT)
p = c(0,cumsum(r))
timestamps = seq(34200, 57600, length.out = iT+1)
# Test every minute after the instability period is over.
testTimes  = seq(34260 + varianceBandwidth, 57600, 60L)
target_file <- "/tmp/Rprof.out"
# Collect profile data
start_profiler(target_file)
## code to be profiled
# Calculate drift burst test statistic
DBH = driftBursts(timestamps, p, testTimes, preAverage = 1, ACLag = -1,
meanBandwidth = meanBandwidth, varianceBandwidth = varianceBandwidth)
stop_profiler()
sum(ds_pprof$samples$value)
sum(ds_rprof$samples$value)
ds_rprof$samples$value
ds_pprof$samples$value
ds_rprof$samples$value
library(jointprof)
library(DriftBurstHypothesis)
set.seed(1)
# Set mean and variance bandwidth parameters
meanBandwidth = 300L
varianceBandwidth = 900L
# Simulate noise-less price series with 23400 observations, denoting 1 trader per second
# and generate corresponding timestamps.
iT = 23399
r = rnorm(iT, mean = 0, sd = 1)/sqrt(iT)
p = c(0,cumsum(r))
timestamps = seq(34200, 57600, length.out = iT+1)
# Test every minute after the instability period is over.
testTimes  = seq(34260 + varianceBandwidth, 57600, 60L)
target_file <- "/tmp/Rprof.out"
# Collect profile data
start_profiler(target_file)
## code to be profiled
# Calculate drift burst test statistic
DBH = driftBursts(timestamps, p, testTimes, preAverage = 1, ACLag = -1,
meanBandwidth = meanBandwidth, varianceBandwidth = varianceBandwidth)
stop_profiler()
ds_pprof <- shift_ids(ds_pprof, ds_rprof)
ds_rprof <- expand_samples(ds_rprof)
ds_pprof <- expand_samples(ds_pprof)
ds_combined <- combine_ds(ds_rprof, ds_pprof)
ds_merged <- patch_combined_ds(ds_combined)
library(jointprof)
library(DriftBurstHypothesis)
set.seed(1)
# Set mean and variance bandwidth parameters
meanBandwidth = 300L
varianceBandwidth = 900L
# Simulate noise-less price series with 23400 observations, denoting 1 trader per second
# and generate corresponding timestamps.
iT = 23399
r = rnorm(iT, mean = 0, sd = 1)/sqrt(iT)
p = c(0,cumsum(r))
timestamps = seq(34200, 57600, length.out = iT+1)
# Test every minute after the instability period is over.
testTimes  = seq(34260 + varianceBandwidth, 57600, 60L)
target_file <- "/tmp/Rprof.out"
# Collect profile data
start_profiler(target_file)
## code to be profiled
# Calculate drift burst test statistic
DBH = driftBursts(timestamps, p, testTimes, preAverage = 1, ACLag = -1,
meanBandwidth = meanBandwidth, varianceBandwidth = varianceBandwidth)
stop_profiler()
library(DriftBurstHypothesis)
library(jointprof)
library(DriftBurstHypothesis)
set.seed(1)
# Set mean and variance bandwidth parameters
meanBandwidth = 300L
varianceBandwidth = 900L
# Simulate noise-less price series with 23400 observations, denoting 1 trader per second
# and generate corresponding timestamps.
iT = 23399
r = rnorm(iT, mean = 0, sd = 1)/sqrt(iT)
p = c(0,cumsum(r))
timestamps = seq(34200, 57600, length.out = iT+1)
# Test every minute after the instability period is over.
testTimes  = seq(34260 + varianceBandwidth, 57600, 60L)
target_file <- "/tmp/Rprof.out"
# Collect profile data
start_profiler(target_file)
# Calculate drift burst test statistic
DBH = driftBursts(timestamps, p, testTimes, preAverage = 1, ACLag = -1,
meanBandwidth = meanBandwidth, varianceBandwidth = varianceBandwidth)
stop_profiler()
options(error = recover)
library(jointprof)
library(DriftBurstHypothesis)
set.seed(1)
# Set mean and variance bandwidth parameters
meanBandwidth = 300L
varianceBandwidth = 900L
# Simulate noise-less price series with 23400 observations, denoting 1 trader per second
# and generate corresponding timestamps.
iT = 23399
r = rnorm(iT, mean = 0, sd = 1)/sqrt(iT)
p = c(0,cumsum(r))
timestamps = seq(34200, 57600, length.out = iT+1)
# Test every minute after the instability period is over.
testTimes  = seq(34260 + varianceBandwidth, 57600, 60L)
target_file <- "/tmp/Rprof.out"
# Collect profile data
start_profiler(target_file)
# Calculate drift burst test statistic
DBH = driftBursts(timestamps, p, testTimes, preAverage = 1, ACLag = -1,
meanBandwidth = meanBandwidth, varianceBandwidth = varianceBandwidth)
stop_profiler()
sum(ds_pprof$samples$value)
sum(ds_rprof$samples$value)
# Convert to pprof format and analyze
pprof_target_file <- "Rprof.pb.gz"
profile_data <- profile::read_rprof(target_file)
library(DriftBurstHypothesis)
library(data.table)
library(anytime)
library(xts)
dat <- fread("/home/emil/Downloads/EuronextParis-IntradayTrades-20200206.csv")
dat[, DT := anytime(paste(dat$`Trade date`, gsub(":", ".",dat$`Trade time`)))]
dat <- dat[order(DT)]
dat <- dat[Category == "Share",]
sum(dat$`ISIN code` == "FR0000121501")
foo <- xts(dat[`ISIN code` == "FR0000121501",`Price (in trading currency)`], order.by = dat[`ISIN code` == "FR0000121501",DT], tz = "CEST")
DBH <- DriftBurstHypothesis::driftBursts(logPrices = log(foo), testTimes = (as.numeric(index(foo)) %% 86400)[1:4], sessionStart = 25260, sessionEnd = 56000)
testTimes
testTimes[-1]
min(testTimes)
min(timestamps) >= min(testTimes) + 5
min(timestamps) + 5 >= min(testTimes)
library(DriftBurstHypothesis)
DBH <- DriftBurstHypothesis::driftBursts(logPrices = log(foo), testTimes = (as.numeric(index(foo)) %% 86400)[1:4], sessionStart = 25260, sessionEnd = 56000)
DBH <- DriftBurstHypothesis::driftBursts(logPrices = log(foo), testTimes = (as.numeric(index(foo)) %% 86400)[1:4], sessionStart = 25260, sessionEnd = 56000)
library(DriftBurstHypothesis)
DBH <- DriftBurstHypothesis::driftBursts(logPrices = log(foo), testTimes = (as.numeric(index(foo)) %% 86400)[1:4], sessionStart = 25260, sessionEnd = 56000)
timestamps
testTimes
length(testTimes)
library(DriftBurstHypothesis)
library(data.table)
library(anytime)
library(xts)
dat <- fread("/home/emil/Downloads/EuronextParis-IntradayTrades-20200206.csv")
dat[, DT := anytime(paste(dat$`Trade date`, gsub(":", ".",dat$`Trade time`)))]
dat <- dat[order(DT)]
dat <- dat[Category == "Share",]
sum(dat$`ISIN code` == "FR0000121501")
foo <- xts(dat[`ISIN code` == "FR0000121501",`Price (in trading currency)`], order.by = dat[`ISIN code` == "FR0000121501",DT], tz = "CEST")
DBH <- DriftBurstHypothesis::driftBursts(logPrices = log(foo), testTimes = (as.numeric(index(foo)) %% 86400)[1:4], sessionStart = 25260, sessionEnd = 56000)
plot(DBH)
DBH <- DriftBurstHypothesis::driftBursts(logPrices = log(foo), testTimes = (as.numeric(index(foo)) %% 86400), sessionStart = 25260, sessionEnd = 56000)
DBH
DBH
View(DBH)
DBH[["driftBursts"]]
plot(DBH$driftBursts)
library(DriftBurstHypothesis)
plot(DBH)
library(data.table)
library(anytime)
library(xts)
dat <- fread("/home/emil/Downloads/EuronextParis-IntradayTrades-20200206.csv")
dat[, DT := anytime(paste(dat$`Trade date`, gsub(":", ".",dat$`Trade time`)))]
dat <- dat[order(DT)]
dat <- dat[Category == "Share",]
sum(dat$`ISIN code` == "FR0000121501")
foo <- xts(dat[`ISIN code` == "FR0000121501",`Price (in trading currency)`], order.by = dat[`ISIN code` == "FR0000121501",DT], tz = "CEST")
DBH <- driftBursts(logPrices = log(foo), testTimes = (as.numeric(index(foo)) %% 86400), sessionStart = 25260, sessionEnd = 56000)
plot(DBH)
library(DriftBurstHypothesis)
library(DriftBurstHypothesis)
